// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using library.data.Data;

#nullable disable

namespace library.data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("library.data.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "None",
                            ConcurrencyStamp = "4312d35f-3fe6-4a65-b2b1-b46ef6837147",
                            Email = "admin@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK8iBs5v2/pAPnCFCzI8U4kMO8sUg2l+YWjiS/Y3T7ZnmnpbVw4PylFdI6YL8QbezA==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c06e6ee0-7903-413f-8a8c-a8fa0b28ab1d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "Sancaktepe/İstanbul",
                            ConcurrencyStamp = "bdd2a59a-5699-496f-a641-9df05d5e7eb7",
                            Email = "mehmet@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mehmet",
                            LastName = "Kayar",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKYR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDApODJlp7gQX+EnZKFH0NixCYNJehcCuvIbt+SWHuZ3VwbJdn/UXeN2nds7MTNb7w==",
                            PhoneNumber = "5318379692",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "184b5967-4b82-4ee0-bb1e-a7724d2d918e",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkyr"
                        });
                });

            modelBuilder.Entity("library.data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationInfo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PublishDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasDefaultValue("On the shelf");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Sabahattin Ali",
                            ISBN = 9789753638029L,
                            Image = "1.jpeg",
                            LocationInfo = "A1-b2",
                            Name = "Kürk Mantolu Madonna",
                            PublishDateTime = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Stephen Hawking",
                            ISBN = 9786051067582L,
                            Image = "2.jpeg",
                            LocationInfo = "A2-b1",
                            Name = "Zamanın Kısa Tarihi",
                            PublishDateTime = new DateTime(2023, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Franz Kafka",
                            ISBN = 9789750719356L,
                            Image = "3.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Dönüşüm",
                            PublishDateTime = new DateTime(2019, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Jose Mauro De Vasconcelos",
                            ISBN = 9789750738609L,
                            Image = "4.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Şeker Portakalı",
                            PublishDateTime = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Benedictus Spinoza",
                            ISBN = 9789752981478L,
                            Image = "5.jpeg",
                            LocationInfo = "A3-b1",
                            Name = "Etika",
                            PublishDateTime = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Philosophy"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Carl Sagan",
                            ISBN = 9789752107830L,
                            Image = "6.jpeg",
                            LocationInfo = "A2-b1",
                            Name = "Kozmos Evrenin ve Yaşamın Sırları",
                            PublishDateTime = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Science"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Irvin D. Yalom",
                            ISBN = 9789755391465L,
                            Image = "7.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Nietzsche Ağladığında",
                            PublishDateTime = new DateTime(2023, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Victor Hugo",
                            ISBN = 9786052194973L,
                            Image = "8.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Bir İdam Mahkumunun Son Günü",
                            PublishDateTime = new DateTime(2018, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Sabahattin Ali",
                            ISBN = 9789753638029L,
                            Image = "1.jpeg",
                            LocationInfo = "A1-b2",
                            Name = "Kürk Mantolu Madonna",
                            PublishDateTime = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Stephen Hawking",
                            ISBN = 9786051067582L,
                            Image = "2.jpeg",
                            LocationInfo = "A2-b1",
                            Name = "Zamanın Kısa Tarihi",
                            PublishDateTime = new DateTime(2023, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Science"
                        },
                        new
                        {
                            Id = 11,
                            Author = "Franz Kafka",
                            ISBN = 9789750719356L,
                            Image = "3.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Dönüşüm",
                            PublishDateTime = new DateTime(2019, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 12,
                            Author = "Jose Mauro De Vasconcelos",
                            ISBN = 9789750738609L,
                            Image = "4.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Şeker Portakalı",
                            PublishDateTime = new DateTime(2019, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 13,
                            Author = "Benedictus Spinoza",
                            ISBN = 9789752981478L,
                            Image = "5.jpeg",
                            LocationInfo = "A3-b1",
                            Name = "Etika",
                            PublishDateTime = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Philosophy"
                        },
                        new
                        {
                            Id = 14,
                            Author = "Carl Sagan",
                            ISBN = 9789752107830L,
                            Image = "6.jpeg",
                            LocationInfo = "A2-b1",
                            Name = "Kozmos Evrenin ve Yaşamın Sırları",
                            PublishDateTime = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Science"
                        },
                        new
                        {
                            Id = 15,
                            Author = "Irvin D. Yalom",
                            ISBN = 9789755391465L,
                            Image = "7.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Nietzsche Ağladığında",
                            PublishDateTime = new DateTime(2023, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        },
                        new
                        {
                            Id = 16,
                            Author = "Victor Hugo",
                            ISBN = 9786052194973L,
                            Image = "8.jpeg",
                            LocationInfo = "A1-b1",
                            Name = "Bir İdam Mahkumunun Son Günü",
                            PublishDateTime = new DateTime(2018, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "On the shelf",
                            Type = "Novel"
                        });
                });

            modelBuilder.Entity("library.data.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "mehmet@hotmail.com",
                            FirstName = "Mehmet",
                            LastName = "Kayar",
                            Message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Phone = "5318379612",
                            Title = "Örnek Konu"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ahmet@hotmail.com",
                            FirstName = "Ahmet",
                            LastName = "Kılıç",
                            Message = "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. ",
                            Phone = "5318379611",
                            Title = "Örnek Başlık"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ayse@hotmail.com",
                            FirstName = "Ayşe",
                            LastName = "Koç",
                            Message = "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Phone = "5318379632",
                            Title = "Örnek Title"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("library.data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("library.data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library.data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("library.data.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("library.data.Models.Book", b =>
                {
                    b.HasOne("library.data.Identity.AppUser", "Member")
                        .WithMany("Books")
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("library.data.Identity.AppUser", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
